/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package hr.algebra.view;

import hr.algebra.dal.Repository;
import hr.algebra.dal.RepositoryFactory;
import hr.algebra.model.Movie;
import hr.algebra.model.User;
import hr.algebra.utilities.MessageUtils;
import hr.algebra.view.model.MovieTableModel;
import hr.algerba.handler.FavoriteMoviesTransferHandler;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DropMode;

/**
 *
 * @author msokol
 */
public class FavoriteMoviePanel extends javax.swing.JPanel {

    private final Repository repository;
    private final User currentUser;
    private MovieTableModel allMoviesModel;
    private MovieTableModel favoriteMoviesModel;

    /**
     * Creates new form FavoriteMoviePanel
     */
    public FavoriteMoviePanel(User currentUser) {
        this.currentUser = currentUser;
        this.repository = RepositoryFactory.getRepository();
        initComponents();

        allMoviesModel = new MovieTableModel(new ArrayList<>());
        favoriteMoviesModel = new MovieTableModel(new ArrayList<>());
        tbMoviesAll.setModel(allMoviesModel);
        tbMoviesFavorite.setModel(favoriteMoviesModel);

        setupDragAndDrop();
        loadMovies();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tbMoviesFavorite = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbMoviesAll = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnRemove = new javax.swing.JButton();
        btnAddToFavorite = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(1186, 784));

        tbMoviesFavorite.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tbMoviesFavorite);

        tbMoviesAll.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tbMoviesAll);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("All Movies");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel2.setText("Favorite Movies");

        btnRemove.setText("Remove ");
        btnRemove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnRemoveMouseClicked(evt);
            }
        });

        btnAddToFavorite.setText("Add");
        btnAddToFavorite.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAddToFavoriteMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAddToFavorite, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 965, Short.MAX_VALUE)
                        .addComponent(jScrollPane1))
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(186, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAddToFavorite, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(226, 226, 226))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddToFavoriteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddToFavoriteMouseClicked
        int selectedRow = tbMoviesAll.getSelectedRow();
        if (selectedRow != -1) {
            Movie selectedMovie = allMoviesModel.getMovieAt(selectedRow);
            try {
                repository.addFavoriteMovie(currentUser.getUsrename(), selectedMovie.getId());
                loadMovies(); // Refresh both tables
            } catch (Exception ex) {
                MessageUtils.showErrorMessage("Error", "Failed to add favorite: " + ex.getMessage());
            }
        } else {
            MessageUtils.showInformationMessage("Selection required", "Please select a movie to add to favorites.");
        }
    }//GEN-LAST:event_btnAddToFavoriteMouseClicked

    private void btnRemoveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRemoveMouseClicked
        int selectedRow = tbMoviesFavorite.getSelectedRow();
        if (selectedRow != -1) {
            Movie selectedMovie = favoriteMoviesModel.getMovieAt(selectedRow);
            try {
                repository.removeFavoriteMovie(currentUser.getUsrename(), selectedMovie.getId());
                loadMovies(); // Refresh both tables
            } catch (Exception ex) {
                MessageUtils.showErrorMessage("Error", "Failed to remove favorite: " + ex.getMessage());
            }
        } else {
            MessageUtils.showInformationMessage("Selection required", "Please select a movie to remove from favorites.");
        }
    }//GEN-LAST:event_btnRemoveMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddToFavorite;
    private javax.swing.JButton btnRemove;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tbMoviesAll;
    private javax.swing.JTable tbMoviesFavorite;
    // End of variables declaration//GEN-END:variables

    private void loadMovies() {
        try {
            List<Movie> allMovies = repository.selectMovies();
            allMoviesModel.setMovies(allMovies);

            List<Movie> favoriteMovies = repository.selectFavoriteMovies(currentUser.getUsrename());
            favoriteMoviesModel.setMovies(favoriteMovies);

            tbMoviesAll.revalidate();
            tbMoviesAll.repaint();
            tbMoviesFavorite.revalidate();
            tbMoviesFavorite.repaint();

        } catch (Exception ex) {
            MessageUtils.showErrorMessage("Error", "Failed to load movies: " + ex.getMessage());
        }
    }

    private void setupDragAndDrop() {
        FavoriteMoviesTransferHandler transferHandler = new FavoriteMoviesTransferHandler(
                repository,
                currentUser,
                allMoviesModel,
                favoriteMoviesModel,
                tbMoviesAll,
                tbMoviesFavorite
        );

        tbMoviesAll.setDragEnabled(true);
        tbMoviesAll.setTransferHandler(transferHandler);

        tbMoviesFavorite.setDragEnabled(false);
        tbMoviesFavorite.setDropMode(DropMode.ON);
        tbMoviesFavorite.setTransferHandler(transferHandler);
    }

}
